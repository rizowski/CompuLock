Week 7:
	Notes:
		- 
	Todo: 
		Web:
			Models:
				User:
					- 
				Computer:
					- 
				Account:
					- 
				Program:
					- |Done| Last Ran needs to be removed
				Process:
					- Model display needs to be Solved
				History:
					- |Done| Last Visited needs to be removed
			Errors: 
				- |Done| Fix any errors with Removing Last Visited and opened
		Desktop:
			REST 2.0:
				User:
					- |Done| Show
					- |Done| Update
				Account:
					- |Done| List
					- |Done| Update
					- |Done| Show
					- |Done| Create
						- For this you need a pre saved computer to the db.
					- |Done| Destroy
				Computer:
					- |Done| Create
					- |Done| Update
					- |Done| Show
					- |Done| List
				Notes: 
					- With the new discovery of updating an object with out needing other api calls. Process Programs and history are now taken care of.
			Database:
				Defenses:
					- |Done| SQL injection
						- From what I understand sql injection is automatically handled when using paramaterized variables in sqlite.
						- http://stackoverflow.com/a/139270/1162192
				Saving:
					- |Done| Computers
					- |Done| users
					- |DOne| accounts
					- |Done| Programs
					- |Done| Processes
					- |Done| History
				Retrieving:
					User:
						- |Done| One
					Computer:
						- |Done| One
					Accounts:
						- |Done| All
						- |Done| By Id
					Processes:
						- |Done| All
						- |Done| By Id
						- |Done| By accountId
					Histories:
						- |Done| All
						- |Done| By ID
						- |Done| By Account Id
					Programs:
						- |Done| All
						- |Done| By ID
						- |Done| By Account Id
				Modifications:
					Account: 
						- |Done| Have some sort of admin field.
						- |Done| Need to have some sort of date ranges
				Additions:
					Restrictions:
						- |Done| Create Table
						- Adding
			Data Retrieving:
				Computer:
					- Name
					- Enviroment
					- IpAddress (Not required)
				Process:
					- Getting all Processes; needs some way of finding account by name then getting id to set to process
			Todo:
				- When an object is parsed from REST and there is an error.
					- Try to parse it into an error object.
					- Might not be needed. or possible.

Things Accomplished:
	- Solved Processes Problem
		- Ruby/Rails Language problem
		- Class reference Problem
	- Added Account Admin field	
	- Added User time Constraint classes
	- Fixed REST to update a user
	- Added Process start/end events
	- Pushed to Heroku
	- SQLite injection solved with Parameterized variables

Things still needing to be done:
	Service 5:
		- (3) Hosting Login logging
		- (3) Processes logging with owner
		- (3) Program logging with owner 
			- might not need programs with processes could use just Processes.
		- (5) Installer
	Tie it all together 4:
		- Database
		- REST
		- Computer info
	GUI 1:
		- Website
		- Desktop
Microsoft sync

TODO:
	- Learn more about SQL injection and why simple strings are bad how to identify them.
Week 8:
	TODO:
		- Learn more about SQL injection 
			- Why not use simple strings
			- How to id entify if sql injection is possible
Resources:
	Windows Service:
		- http://code.msdn.microsoft.com/windowsdesktop/CSWindowsService-9f2f568e
		- http://msdn.microsoft.com/en-us/library/ms731758.aspx
		- http://www.c-sharpcorner.com/uploadfile/mirfan00/windows-service-in-C-Sharp/



Pulls from the server first, then pushes.
Need to fix history to just have url. I dont need url
Check if sqlite is busy before inserting....

Notes for Presentation:
	As for browser history I can use a proxy to get all the information
	As for account being associated with the history I can get the currently logged in user
	Learned unmanaged dll calls